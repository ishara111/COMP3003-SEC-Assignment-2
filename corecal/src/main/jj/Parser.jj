options {
    IGNORE_CASE=true; // this will make sure that case-sensitivity is not taken into account
    }
PARSER_BEGIN(MyParser)

package edu.curtin.sec.assignment2;
import java.util.*;

public class MyParser {

    // event class
    static class Event {
        public String title;
        public String startDate;
        public String startTime;
        public String duration;


        public Event(String title,String startDate, String startTime, String duration) {
            this.title = title;
            this.startDate = startDate;
            this.startTime = startTime;
            this.duration = duration;

        }
        public Event(String title,String startDate) {
            this.title = title;
            this.startDate = startDate;
            this.startTime = null;
            this.duration = "";

        }

        public String getStartDate()
        {
            return startDate;
        }
        public String getTitle()
        {
            return title;
        }
        public String getStartTime()
        {
            return startTime;
        }
        public String getDuration()
        {
            return duration;
        }
    }

    // plugin class
    static class Plugin {
        private String className;
        private String title;
        private String startDate;
        private String startTime;
        private String duration;
        private String repeat;

        public Plugin(String className,String title, String startDate, String startTime, String duration,String repeat) {
            this.className = className;
            this.title = title;
            this.startDate = startDate;
            this.startTime = startTime;
            this.duration = duration;
            this.repeat = repeat;
        }

        public String getClassName() {
            return className;
        }

        public String getStartDate() {
            return startDate;
        }

        public String getStartTime() {
            return startTime;
        }

        public String getDuration() {
            return duration;
        }

        public String getTitle() {
            return title;
        }
        public String getRepeat()
        {
            return repeat;
        }
    }

    public static ArrayList events = new ArrayList(); // lists that are used to store events plugins and scripts
    public static ArrayList plugins = new ArrayList();
    public static ArrayList scripts = new ArrayList();

     public static ArrayList getEvents() //returns all parsed events
     {
         return events;
     }

     public static ArrayList getScripts() //returns all parsed scripts
     {
         return scripts;
     }
     public static ArrayList getPlugins() //returns all parsed plugins
     {
         return plugins;
     }


}
PARSER_END(MyParser)

// these tokens will be skipped while parsing
SKIP:
{
    " " |
    "\n" |
    "\r" |
    "\t"
}

// below are all the tokens that will be used to parse
TOKEN :
{
    <EVENT : "event">
    |<SCRIPT : "script">
    |<PLUGIN : "plugin">
    |<PLUGINNAME : (["a"-"z", "A"-"Z", "."])+>
    |<TEXT : "\"" ( ~["\""] | "\"\"" )* "\"" >
//    |<TEXT : "\"" (~["\""] | ["a"-"z", "A"-"Z", "0"-"9", " ", "\n", "\r", "\t"])+ "\"">
    |<DATE : (["0" - "9"])+ "-" (["0" - "9"])+ "-" (["0" - "9"])+ >
    |<TIME : (["0" - "9"])+ ":" (["0" - "9"])+ ":" (["0" - "9"])+ >
    |<DURATION : (["0" - "9"])+ >
    |<ALLDAY : "all-day" >


}

void parse():
{
}
{
    // parses until file ends
    start() <EOF>
}


void start() throws ParseException:
{
}
{
    (   // Either going to find events plugins or scripts
        events() | plugins() | scripts()


    )* // there can be a lot of each type
}
// parses all evets
void events() throws ParseException:
{
    String date= "";
    String time= "";
    String duration= "";
    String title= "";

    Token dateToken= null;
    Token timeToken= null;
    Token durationToken= null;
    Token titleToken= null;
}
{

    try {

              ( <EVENT>
              dateToken=<DATE>{ date = dateToken.image; }
              (
              timeToken=<TIME>{ time = timeToken.image; }
              durationToken=<DURATION>{ duration = durationToken.image; }

              |
              <ALLDAY>
              )
              titleToken=<TEXT> { title = titleToken.image; }
              )

              {
                title = title.replace("\"", "");
                date = date.replace("\"", "");
                time = time.replace("\"", "");
                duration = duration.replace("\"", "");
                events.add(new Event(title,date,time,duration));
              }


    }

    catch(ParseException e) {
        System.err.println("\u001B[31m[DSL PARSING ERROR (EVENT)] Event Is Defined Incorrectly!!!\u001B[0m");
        System.err.println(e.getMessage());
        System.exit(0);
    }
}

// parses all plugins
void plugins() throws ParseException:
{
    String name= "";
    String title= "";
    String date = "";
    String time = "";
    String duration = "";
    String repeat = "";

    Token nameToken= null;
    Token titleToken= null;
    Token dateToken = null;
    Token timeToken = null;
    Token durationToken = null;
    Token repeatToken = null;

}
{

    try {
            <PLUGIN>
            nameToken=<PLUGINNAME> { name = nameToken.image; }
            "{"
               "title:" titleToken=<TEXT> { title = titleToken.image; }
                (
                   "," "startDate:" dateToken=<TEXT> { date = dateToken.image; }
                   "," "repeat:" repeatToken=<TEXT> { repeat = repeatToken.image; }
                   (
                       "," "startTime:" timeToken=<TEXT> { time = timeToken.image; }
                       "," "duration:" durationToken=<TEXT> { duration = durationToken.image; }
                       "}"
                   |
                      "}"
                   )
                |
                  "}"
           )

          {
          name = name.replace("\"", "");
          title = title.replace("\"", "");
          date = date.replace("\"", "");
          time = time.replace("\"", "");
          duration = duration.replace("\"", "");
          repeat = repeat.replace("\"", "");
            plugins.add(new Plugin(name,title,date,time,duration,repeat));
          }


    }

    catch(ParseException e) {
        System.err.println("\u001B[31m[DSL PARSING ERROR (PLUGIN)] Plugin Is Defined Incorrectly!!!\u001B[0m");
        System.err.println(e.getMessage());
        System.exit(0);
    }
}

// parses all scrips
void scripts() throws ParseException:
{
    String script= "";


    Token scriptToken= null;

}
{

    try {

            (<SCRIPT>
            scriptToken=<TEXT> { script = scriptToken.image; }
            )

              {
              script = script.substring(1);
              script = script.substring(1, script.length() - 1);
              script = script.replaceAll("\"\"", "\"");
              scripts.add(script);
              }


    }

    catch(ParseException e) {
        System.err.println("\u001B[31m[DSL PARSING ERROR (SCRIPT)] Script Is Defined Incorrectly!!!\u001B[0m");
        System.err.println(e.getMessage());
        System.exit(0);
    }
}


